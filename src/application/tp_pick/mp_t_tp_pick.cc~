#include "mp_t_tp_pick.h"

// ecp generators to be commanded
#include "generator/ecp/tff_gripper_approach/ecp_mp_g_tff_gripper_approach.h"
#include "generator/ecp/smooth_file_from_mp/ecp_mp_g_smooth_file_from_mp.h"
#include "generator/ecp/bias_edp_force/ecp_mp_g_bias_edp_force.h"
#include "generator/ecp/constant_velocity/ecp_mp_g_constant_velocity.h"

#include "application/visual_servoing_demo/ecp_mp_g_visual_servo_tester.h"

// mp_robots headers
#include "robot/irp6ot_m/mp_r_irp6ot_m.h"
#include "robot/irp6ot_tfg/mp_r_irp6ot_tfg.h"
#include "application/irp6_tfg/ecp_mp_g_tfg.h"
#include "robot/irp6_tfg/dp_tfg.h"

namespace mrrocpp {
namespace mp {
namespace task {

// powolanie robotow w zaleznosci od zawartosci pliku konfiguracyjnego
void tp_pick::create_robots()
{
	ACTIVATE_MP_ROBOT(irp6ot_tfg);
	ACTIVATE_MP_ROBOT(irp6ot_m);
}

tp_pick::tp_pick(lib::configurator &config) :
		task(config), config_section_name("[visualservo_tester]")
{
	run_vs = config.value <bool>("run_vs", config_section_name);
	vs_settle_time = config.value <int>("vs_settle_time", config_section_name);
	robot_name = config.value <std::string>("robot_name", config_section_name);
}

void tp_pick::start_position(void)
{
	sr_ecp_msg->message("start_position");

	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/start_position.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
}

void tp_pick::gripper(double width)
{
	sr_ecp_msg->message("gripper");
	
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_CONSTANT_VELOCITY, (int) lib::ABSOLUTE, width, lib::irp6ot_tfg::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_tfg::ROBOT_NAME);
}
 
void tp_pick::down(void)
{
	sr_ecp_msg->message("down");

	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_ANGLE_AXIS_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/down.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
}

void tp_pick::up(void)
{
	sr_ecp_msg->message("up");
	
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_ANGLE_AXIS_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/up.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
}

void tp_pick::throw_dices(void)
{
	sr_ecp_msg->message("throw_dices");

	//nad kubek
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/throw_dices_1_to_cup.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
	//w dół do krawędzi
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/throw_dices_2_go_down.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
	//otwórz szczęki
	gripper(0.085);
	//czekaj na reakcje
	wait_ms(3000);
	//w dół do kubka
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/throw_dices_3_go_down.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
	//zaciśnij szczęki
	gripper(0.071);
	//w górę
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/throw_dices_2_go_down.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
	//do rzutu
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/throw_dices_4_ready.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
	//przechyl
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/throw_dices_5_throw.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
	//do odłożenia
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/throw_dices_2_go_down.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
	//odłóż
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/throw_dices_3_go_down.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
	//rozluźnij szczęki	
	gripper(0.085);
	//nad kubek
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/throw_dices_1_to_cup.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
}

void tp_pick::pick(double x,double y)
{
	sr_ecp_msg->message("pick");

	// wycentruj x, wycentruj y, opuść, zaciśnij, podnieś
}

void tp_pick::under_slot(int slot)
{
	sr_ecp_msg->message("under_slot");
	
	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/slot0.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);

	switch (slot)
	{
		case 1 :
		set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/slot1.trj", lib::irp6ot_m::ROBOT_NAME);
		wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
		break;

		case 2 :
		set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/slot2.trj", lib::irp6ot_m::ROBOT_NAME);
		wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
		break;

		case 3 :
		set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/slot3.trj", lib::irp6ot_m::ROBOT_NAME);
		wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
		break;

		case 4 :
		set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/slot4.trj", lib::irp6ot_m::ROBOT_NAME);
		wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
		break;

		case 5 :
		set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/slot5.trj", lib::irp6ot_m::ROBOT_NAME);
		wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
		break;

		
	}
}

void tp_pick::put_away(void)
{
	sr_ecp_msg->message("put_away");

	// wylicz slot, przesuń, opuść, puść, podnies, pozycja startowa
}

void tp_pick::put_to_cup(void)
{
	sr_ecp_msg->message("put_to_cup");

	set_next_ecp_state(ecp_mp::generator::ECP_GEN_SMOOTH_JOINT_FILE_FROM_MP, 0, "../../src/application/tp_pick/trj/under_cup.trj", lib::irp6ot_m::ROBOT_NAME);
	wait_for_task_termination(false, lib::irp6ot_m::ROBOT_NAME);
	gripper(0.09);
	
}

void tp_pick::pick_all(void)
{
	sr_ecp_msg->message("pick_all");

	// put_to_cup dla wszystkich
	for(int i=1;i<6;i++){
		gripper(0.09);		
		under_slot(i);
		wait_ms(1500);
		down();
		wait_ms(500);
		gripper(0.076);
		wait_ms(500);		
		up();
		put_to_cup();	
	}	

}

void tp_pick::main_task_algorithm(void)
{
	sr_ecp_msg->message("(!) TP_PICK (MP) START v 1.28");


	start_position();
	wait_ms(1000);

	if (run_vs) {
		sr_ecp_msg->message("Starting visual servo");
		set_next_ecp_state(mrrocpp::ecp_mp::generator::ECP_GEN_VISUAL_SERVO_TEST, 0, "", robot_name);
		sr_ecp_msg->message("Visual servo started.");

		char txt[128];
		sprintf(txt, "Waiting for settle down (%d s)", vs_settle_time);
		sr_ecp_msg->message(txt);
		for (int i = vs_settle_time; i > 0; --i) {
			//log("Waiting for VS to stabilize %-4d   \r", i);
			sleep(1);
		}
		//log("\n");
	}


	sr_ecp_msg->message("(!) TP_PICK (MP) END");
}

task* return_created_mp_task(lib::configurator &_config)
{
	return new tp_pick(_config);
}



} // namespace task
} // namespace mp
} // namespace mrrocpp
