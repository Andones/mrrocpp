
/* ../fun.cc */
int set_ui_busy_state_notification ();
int set_ui_ready_state_notification () ;
int teaching_window_send_move(double *v);
int teaching_window_end_motion();
int manage_configuration_file ( void );
int manage_interface ( void );
int input_double_callback ( double *v );
int yes_no_callback ( double *v );
int input_integer_callback ( double *v );
int choose_option_callback ( double *v );
int file_selection_window_send_location ( char *Buffer );
int is_dir ( char *filename );
int block_all_ecp_trigger_widgets ( void );
int unblock_all_ecp_trigger_widgets ( void );
int process_control_window_init ( void );
int get_configs ( void );
int get_contents ( char *Buffer );
int set_config ( char *fn );
int all_robots_move_to_synchro_position ( void );
int all_robots_move_to_position0 ( void );
int all_robots_move_to_position1 ( void );
int all_robots_move_to_position2 ( void );
int EDP_all_robots_create ( void );
int EDP_all_robots_slay ( void );
int MPup ( void );
bool deactivate_ecp_trigger ( ecp_edp_ui_robot_def &robot_l );
int execute_mp_pulse ( char pulse_code );
int MPslay ( void );
int pulse_start_mp ( void );
int pulse_stop_mp ( void );
int pulse_pause_mp ( void );
int pulse_resume_mp ( void );
int pulse_trigger_mp ( void );
int signal_mp ( void );
int pulse_reader_all_robots_start ( void );
int pulse_reader_all_robots_stop ( void );
int pulse_reader_all_robots_trigger ( void );
int pulse_ecp_all_robots ( void );
int unload_all ( void );
int slay_all ( void );
int EDP_all_robots_synchronise ( void );
int set_ui_state_notification ( UI_NOTIFICATION_STATE_ENUM new_notifacion );
int quit ( void );
int clear_all_configuration_lists ( void );
int initiate_configuration ( void );
int reload_whole_configuration ( void );
int fill_section_list ( char *file_name_and_path );
int fill_node_list ( void );
int fill_program_node_list ( void );
int get_default_configuration_file_name ( void );
int set_default_configuration_file_name ( void );
int check_edps_state_and_modify_mp_state ( void );
int pulse_reader_execute ( int coid , int pulse_code , int pulse_value );
int check_gns ( void );

/* ../fun_r_conveyor.cc */
int process_control_window_conveyor_section_init ( bool &wlacz_PtButton_wnd_processes_control_all_reader_start , bool &wlacz_PtButton_wnd_processes_control_all_reader_stop , bool &wlacz_PtButton_wnd_processes_control_all_reader_trigger );
int pulse_reader_conv_trigger ( void );
int pulse_ecp_conveyor ( void );
int manage_interface_conveyor ( void );
int conveyor_read_servo_algorithm ( void );
int conveyor_read_joints ( void );
int conveyor_read_motors ( void );
int conveyor_moves_move_motors ( double *v );
int conveyor_moves_move_joints ( double *v );
int conv_servo_algorithm_set ( double *v );
int conveyor_move_to_synchro_position ( void );
int conveyor_move_to_position0 ( void );
int conveyor_move_to_position1 ( void );
int conveyor_move_to_position2 ( void );
int EDP_conveyor_synchronise ( void );
int EDP_conveyor_create ( void );
int EDP_conveyor_slay ( void );
int pulse_reader_conv_start ( void );
int pulse_reader_conv_stop ( void );
bool pulse_reader_conv_start_exec_pulse ( void );
bool pulse_reader_conv_stop_exec_pulse ( void );
bool pulse_reader_conv_trigger_exec_pulse ( void );
int reload_conveyor_configuration ( void );

/* ../fun_r_irp6_mechatronika.cc */
int process_control_window_irp6m_section_init ( bool &wlacz_PtButton_wnd_processes_control_all_reader_start , bool &wlacz_PtButton_wnd_processes_control_all_reader_stop , bool &wlacz_PtButton_wnd_processes_control_all_reader_trigger );
int irp6m_read_kinematic ( void );
int irp6m_read_servo_algorithm ( void );
int irp6m_read_post_angle_axis ( void );
int irp6m_read_post_euler ( void );
int irp6m_read_joints ( void );
int irp6m_read_motors ( void );
int irp6m_read_tool_angle ( void );
int irp6m_read_tool_euler ( void );
int irp6m_move_to_synchro_position ( void );
int irp6m_move_to_position0 ( void );
int irp6m_move_to_position1 ( void );
int irp6m_move_to_position2 ( void );
int irp6m_inc_motion ( double *v );
int EDP_irp6_mechatronika_synchronise ( void );
int irp6m_int_motion ( double *v );
int irp6m_xyz_euler_zyz_motion ( double *v );
int irp6m_xyz_angle_axis_motion ( double *wektor_ptgr );
int irp6m_xyz_angle_axis_set_tool ( double *wektor_ptgr );
int irp6m_xyz_euler_zyz_set_tool ( double *v );
int EDP_irp6_mechatronika_slay ( void );
int pulse_reader_irp6m_start ( void );
int pulse_reader_irp6m_stop ( void );
int pulse_reader_irp6m_trigger ( void );
int irp6m_servo_algorithm_set ( double *v );
int EDP_irp6_mechatronika_create ( void );
int irp6m_kinematic_set ( double *v );
int pulse_ecp_irp6_mechatronika ( void );
int manage_interface_irp6m ( void );
bool pulse_reader_irp6m_start_exec_pulse ( void );
bool pulse_reader_irp6m_stop_exec_pulse ( void );
bool pulse_reader_irp6m_trigger_exec_pulse ( void );
int reload_irp6m_configuration ( void );

/* ../fun_r_irp6_on_track.cc */
int process_control_window_irp6ot_section_init ( bool &wlacz_PtButton_wnd_processes_control_all_reader_start , bool &wlacz_PtButton_wnd_processes_control_all_reader_stop , bool &wlacz_PtButton_wnd_processes_control_all_reader_trigger );
int manage_interface_irp6ot ( void );
int irp6ot_read_kinematic ( void );
int irp6ot_read_servo_algorithm ( void );
int irp6ot_read_post_angle_axis ( void );
int irp6ot_read_post_euler ( void );
int irp6ot_read_joints ( void );
int irp6ot_read_motors ( void );
int irp6ot_read_tool_angle ( void );
int irp6ot_read_tool_euler ( void );
int irp6ot_move_to_synchro_position ( void );
int irp6ot_move_to_position0 ( void );
int irp6ot_move_to_position1 ( void );
int irp6ot_move_to_position2 ( void );
int irp6ot_inc_motion ( double *v );
int EDP_irp6_on_track_synchronise ( void );
int irp6ot_int_motion ( double *v );
int irp6ot_xyz_euler_zyz_motion ( double *v );
int irp6ot_xyz_angle_axis_motion ( double *wektor_ptgr );
int irp6ot_xyz_angle_axis_set_tool ( double *wektor_ptgr );
int irp6ot_xyz_euler_zyz_set_tool ( double *v );
int EDP_irp6_on_track_slay ( void );
int pulse_reader_irp6ot_start ( void );
int pulse_reader_irp6ot_stop ( void );
int pulse_reader_irp6ot_trigger ( void );
int irp6ot_servo_algorithm_set ( double *v );
int EDP_irp6_on_track_create ( void );
int irp6ot_kinematic_set ( double *v );
int pulse_ecp_irp6_on_track ( void );
bool pulse_reader_irp6ot_start_exec_pulse ( void );
bool pulse_reader_irp6ot_stop_exec_pulse ( void );
bool pulse_reader_irp6ot_trigger_exec_pulse ( void );
int reload_irp6ot_configuration ( void );

/* ../fun_r_irp6_postument.cc */
int process_control_window_irp6p_section_init ( bool &wlacz_PtButton_wnd_processes_control_all_reader_start , bool &wlacz_PtButton_wnd_processes_control_all_reader_stop , bool &wlacz_PtButton_wnd_processes_control_all_reader_trigger );
int manage_interface_irp6p ( void );
int irp6p_read_kinematic ( void );
int irp6p_read_servo_algorithm ( void );
int irp6p_read_post_angle_axis ( void );
int irp6p_read_post_euler ( void );
int irp6p_read_joints ( void );
int irp6p_read_motors ( void );
int irp6p_read_tool_angle ( void );
int irp6p_read_tool_euler ( void );
int irp6p_move_to_synchro_position ( void );
int irp6p_move_to_position0 ( void );
int irp6p_move_to_position1 ( void );
int irp6p_move_to_position2 ( void );
int irp6p_inc_motion ( double *v );
int EDP_irp6_postument_synchronise ( void );
int irp6p_int_motion ( double *v );
int irp6p_xyz_euler_zyz_motion ( double *v );
int irp6p_xyz_angle_axis_motion ( double *wektor_ptgr );
int irp6p_xyz_angle_axis_set_tool ( double *wektor_ptgr );
int irp6p_xyz_euler_zyz_set_tool ( double *v );
int EDP_irp6_postument_slay ( void );
int pulse_reader_irp6p_start ( void );
int pulse_reader_irp6p_stop ( void );
int pulse_reader_irp6p_trigger ( void );
int irp6p_servo_algorithm_set ( double *v );
int EDP_irp6_postument_create ( void );
int irp6p_kinematic_set ( double *v );
int pulse_ecp_irp6_postument ( void );
bool pulse_reader_irp6p_start_exec_pulse ( void );
bool pulse_reader_irp6p_stop_exec_pulse ( void );
bool pulse_reader_irp6p_trigger_exec_pulse ( void );
int reload_irp6p_configuration ( void );

/* ../fun_r_speaker.cc */
int speaker_preset_sound0 ( void );
int speaker_preset_sound1 ( void );
int speaker_preset_sound2 ( void );
int speaker_play_exec ( void );
int speaker_check_state ( void );
int EDP_speaker_create ( void );
int EDP_speaker_slay ( void );
int pulse_reader_speaker_start ( void );
int pulse_reader_speaker_stop ( void );
int pulse_reader_speaker_trigger ( void );
int pulse_ecp_speaker ( void );
bool pulse_reader_speaker_start_exec_pulse ( void );
bool pulse_reader_speaker_stop_exec_pulse ( void );
bool pulse_reader_speaker_trigger_exec_pulse ( void );
int reload_speaker_configuration ( void );
int manage_interface_speaker ( void );

/* ../timer.cc */
int OnTimer ( void );

/* ../ui_init.cc */
class Message
{
public:
	int RobotId;
	int DialogId;
	int ActionId;
	int varNum;
	char message[256];

	Message(int robotId,int dialogId,int actionId,int varNum,double* v,char* m);
	~Message();
};

void replySend ( Message *m );
void *callfunc ( void *arg );
void *reply_thread ( void *arg );
void *server_thread ( void *);
void *sr_thread ( void *arg );
void *sr_thread ( void *arg );
void *comm_thread ( void *arg );
void catch_signal ( int sig );
int init ( void );
int main ( void );
